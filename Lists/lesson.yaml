- Class: meta
  Course: Intro ao R
  Lesson: Lists
  Author: Teotonio Soares de Carvalho
  Type: Standard
  Organization: Universidade Federal de Lavras
  Version: 2.2.21

- Class: text
  Output: |
          Até esse ponto, vimos duas classes de objetos do R
          
          que servem como estrutura de dados: vetores e matrizes.
          
          Essas duas classes de objetos são atômicas, ou seja,
          
          elas são capazes de armazernar apenas valores (números,
          
          lógicos, caracteres). Por essa razão, elas são homogêneas,
          
          como vimos em lições anteriores.


- Class: text
  Output: |
          Em diversas análises no R, o resultado é muito diverso.
          
          Por exemplo, em uma análise de regressão pode ser retornada
          
          uma matriz de coeficientes, uma tabela de análise de variância,
          
          uma coluna de resíduos, uma matriz modelo, entre outros.
          
          Uma boa maneira de organizar esses resultados é colocá-los todos
          
          em um único objeto capaz de armazenar outros objetos, ou seja
          
          um objeto recursivo: uma lista.
          

- Class: text
  Output: |
          A lista (list) é uma classe de objeto unidimensional (assim como 
          
          os vetores), mas recursiva, sendo capaz de armazenar outros objetos.
          
          Uma lista pode ser imaginada como um conjunto de recipientes
          
          dispostos em fila. No R, esses recipientes de uma lista são chamados 
          
          de "componentes". 


- Class: cmd_question
  Output: |
          Uma das maneiras de criar uma lista é através da função  "list".
          
          EXERCÍCIO
          
          Execute o comando abaixo para criar a lista "minha_lista":
          
          minha_lista <- list("a", 1, FALSE, "b")
          
  CorrectAnswer: 'minha_lista <- list("a", 1, FALSE, "b")'
  AnswerTests: omnitest(correctExpr='minha_lista <- list("a", 1, FALSE, "b")')
  Hint: |
       minha_lista <- list("a", 1, FALSE, "b")


- Class: cmd_question
  Output: |
          
          EXERCÍCIO
          
          Verifique o objeto que você acabou de criar digitando o 
          
          seu nome no console.
          
  CorrectAnswer: 'minha_lista'
  AnswerTests: omnitest(correctExpr='minha_lista')
  Hint: |
        minha_lista


- Class: text
  Output: ...

- Class: cmd_question
  Output: |
          O comando acima criou uma lista, chamada de minha_lista, 
          
          com quatro componentes. Ao contrário de vetores e matrizes,
          
          uma lista não armazena valores, mas apenas objetos. Assim
          
          cada componente de minha_lista armazena um objeto diferente.
          
          EXERCÍCIO
          
          Verifique a estrutura de minha_lista usando a função str
          
  CorrectAnswer: 'str(minha_lista)'
  AnswerTests: omnitest(correctExpr='str(minha_lista)')
  Hint: |
        str(minha_lista)


- Class: text
  Output: |
          O resultado do comando anterior indica que essa lista contém quatro 
          
          componentes:
          
          A primeira componente armazena um vetor character contendo o valor "a";
          
          A segunda componente armazena um vetor numérico contendo o valor 1;
          
          A terceira componente armazena um vetor lógico contendo o valor FALSE;
          
          A quarta componente armazena um vetor character contendo o valor "b".

- Class: cmd_question
  Output: |
          Observe que cada argumento da função list pode ser um objeto,
          
          ou uma expressão que resulte na criação de um objeto.
          
          No exemplo abaixo, fornecemos um sequência de inteiros
          
          como primeiro argumento para a função list, que irá 
          
          compor a primeira componente. No segundo argumento da
          
          função list, nesse exemplo, fornecemos uma expressão 
          
          que cria um vetor caractere. Finalmente, para terceira
          
          componente fornecemos a expressão que resultará em uma
          
          matriz com duas colunas.
  
          EXERCÍCIO
          
          Execute o comando abaixo para criar a lista "minha_outra_lista":
          
          minha_outra_lista <- list(1:10, c("a", "b", "c"), cbind(1:3, 4:6))
          
  CorrectAnswer: 'minha_outra_lista <- list(1:10, c("a", "b", "c"), cbind(1:3, 4:6))'
  AnswerTests: omnitest(correctExpr='minha_outra_lista <- list(1:10, c("a", "b", "c"), cbind(1:3, 4:6))')
  Hint: |
       minha_outra_lista <- list(1:10, c("a", "b", "c"), cbind(1:3, 4:6))


- Class: cmd_question
  Output: |
          
          EXERCÍCIO
          
          Verifique o objeto que você acabou de criar digitando o 
          
          seu nome no console.
          
  CorrectAnswer: 'minha_outra_lista'
  AnswerTests: omnitest(correctExpr='minha_outra_lista')
  Hint: |
        minha_outra_lista


- Class: text
  Output: ...


- Class: cmd_question
  Output: |
          EXERCÍCIO
          
          Agora verifique a estrutura de minha_outra_lista 
          
          usando a função str
          
  CorrectAnswer: 'str(minha_outra_lista)'
  AnswerTests: omnitest(correctExpr='str(minha_outra_lista)')
  Hint: |
        str(minha_outra_lista)

- Class: text
  Output: ...

- Class: cmd_question
  Output: |
          Assim como os vetores, a lista pode ter seus componentes
          
          nomeados. A função names permite acessar e alterar os 
          
          nomes das componentes de uma lista.
  
  
          EXERCÍCIO
          
          Verifique o nome das componentes de minha_outra_lista
          
          utilizando a função names
          
  CorrectAnswer: 'names(minha_outra_lista)'
  AnswerTests: omnitest(correctExpr='names(minha_outra_lista)')
  Hint: |
        names(minha_outra_lista)

- Class: text
  Output: ...

- Class: cmd_question
  Output: |
          Naturalmente, a função names retornou NULL, indicando
          
          que as componentes de minha_outra_lista não estão
          
          nomeados. Para nomear as componentes podemos usar a função
          
          names
  
          EXERCÍCIO
          
          Execute o comando abaixo para nomear as componentes 
          
          de minha_outra_lista:
          
          names(minha_outra_lista) <- c("numeros", "letras", "matriz")
          
  CorrectAnswer: 'names(minha_outra_lista) <- c("numeros", "letras", "matriz")'
  AnswerTests: omnitest(correctExpr='names(minha_outra_lista) <- c("numeros", "letras", "matriz")')
  Hint: |
        names(minha_outra_lista) <- c("numeros", "letras", "matriz")

- Class: cmd_question
  Output: |
          EXERCÍCIO
          
          Verifique novamente a lista minha_outra_lista
          
          digitando seu nome no console. Atente para o
          
          efeito da nomeação dos elementos.
          
  CorrectAnswer: 'minha_outra_lista'
  AnswerTests: omnitest(correctExpr='minha_outra_lista')
  Hint: |
        minha_outra_lista

- Class: text
  Output: ...

- Class: text 
  Output: |
          Você deve ter observado que ao invés de colchetes
          
          duplos com um número identificando cada componente
          
          [[1]]... [[2]]... [[3]], as componentes agora são
          
          identificadas por seus nomes, precedidos de cifrão "$".

          
- Class: cmd_question
  Output: |
          INDEXAÇÃO DE LISTAS
          
          O operador $ é utilizado para selecionar o conteúdo
          
          de componentes de listas quando elas são nomeadas.
  
          EXERCÍCIO
          
          Selecione o vetor armazenado na segunda componente de 
          
          minha_outra_lista utilizando o comando abaixo:
          
          minha_outra_lista$letras
          
  CorrectAnswer: 'minha_outra_lista$letras'
  AnswerTests: omnitest(correctExpr='minha_outra_lista$letras')
  Hint: |
        minha_outra_lista$letras          

- Class: text
  Output: ...

- Class: cmd_question
  Output: |
          EXERCÍCIO
          
          Utilizando o mesmo princípio, selecione a matriz
          
          armazenada na terceira componente de minha_outra_lista.
          
          Dica: a componente desejada chama-se "matriz"
          
  CorrectAnswer: 'minha_outra_lista$matriz'
  AnswerTests: omnitest(correctExpr='minha_outra_lista$matriz')
  Hint: |
        ____________$______          

- Class: text
  Output: ...

- Class: mult_question
  Output: |
          EXERCÍCIO
          
          No exemplo acima, qual é a classe do objeto 
          
          resultante do comando minha_outra_lista$matriz   ?
          
  AnswerChoices: Uma matriz no modo numeric;
                 Um vetor no modo numeric;
                 Uma componente de uma list;
                 Uma lista;
                 
  CorrectAnswer: 'Uma matriz no modo numeric'
  AnswerTests: omnitest(correctVal='Uma matriz no modo numeric')
  Hint: ''  

- Class: text 
  Output: |
          A indexação de uma list usando o operador $ retornará 
          
          o objeto armazenado na componente. Portanto, no exemplo
          
          acima, o comando minha_outra_lista$matriz retorna a 
          
          matriz armazenada nessa componente. 


- Class: mult_question
  Output: |
          EXERCÍCIO
          
          Qual seria a classe do objeto resultante do comando
          
          minha_outra_lista$letras    ?
          
  AnswerChoices: Um vetor no modo character;
                 Uma matriz no modo numeric;
                 Uma componente de uma list;
                 Uma lista;
                 
  CorrectAnswer: 'Um vetor no modo character'
  AnswerTests: omnitest(correctVal='Um vetor no modo character')
  Hint: ''  

- Class: text
  Output: |
          A essa altura do tutorial é a hora de introduzir
          
          um dos princípios mais importantes na programação
          
          em R:
          
          "Uma expressão no R pode ser tratada exatamente
          
          como o objeto em que ela resulta." (Teo, 2016)
          
          Guarde bem esse princípio! 
          
          Agora vamos ver o que ele significa...



- Class: cmd_question
  Output: |
          Sabemos, pelo exercício anterior, que a expressão
          
          minha_outra_lista$letras
          
          retorna um vetor no modo character.
          
          Sabemos também que para selecionar um elemento de um
          
          vetor, basta adicionar o operador colchetes [] após o 
          
          nome do vetor e colocar um índice dentro desse operador.
  
          EXERCÍCIO
          
          Execute o comando abaixo para selecionar o segundo 
          
          elemento do vetor armazenado na componente "letras"
          
          de minha_outra_lista:
          
          minha_outra_lista$letras[2]
          
  CorrectAnswer: 'minha_outra_lista$letras[2]'
  AnswerTests: omnitest(correctExpr='minha_outra_lista$letras[2]')
  Hint: |
        minha_outra_lista$letras[2]          

- Class: text
  Output: ...

- Class: text
  Output: |
          No exemplo anterior, como a expressão minha_outra_lista$letras 
          
          retorna um vetor, podemos simplesmente adicionar [2] à
          
          expressão para selecionar o segundo elemento do vetor.
          
          Ou seja, tratamos a expressão minha_outra_lista$letras
          
          como se ela fosse o próprio vetor.

- Class: cmd_question
  Output: |
          EXERCÍCIO
          
          Usando o mesmo princípio, selecione o terceiro elemento 
          
          do vetor armazenado na componente  
          
          "letras" de minha_outra_lista.
          
  CorrectAnswer: 'minha_outra_lista$letras[3]'
  AnswerTests: omnitest(correctVal = "c")
  Hint: |
        ________________$_____[_]          

- Class: text
  Output: ...


- Class: cmd_question
  Output: |
          EXERCÍCIO
          
          Usando o mesmo princípio, selecione simultaneamente os 
          
          segundo e terceiro elementos do vetor armazenado na 
          
          componente  "letras" de minha_outra_lista.
          
          Dica: Lembre-se de que o objeto resultante da expressão
          
          minha_outra_lista$letras é um vetor!
          
  CorrectAnswer: 'minha_outra_lista$letras[2:3]'
  AnswerTests: omnitest(correctVal = c("b", "c"))
  Hint: |
        ________________$_____[_:_]          

- Class: text
  Output: ...

- Class: cmd_question
  Output: |
          EXERCÍCIO
          
          Ainda utilizando o mesmo princípio, selecione
          
          o elemento na segunda linha e segunda coluna da
          
          matriz armazenada na componente "matriz" de 
          
          minha_outra_lista.
          
          Dica: Lembre-se de que o objeto resultante da expressão
          
          minha_outra_lista$matriz é uma matriz!
          
  CorrectAnswer: 'minha_outra_lista$matriz[2, 2]'
  AnswerTests: omnitest(correctVal = 5)
  Hint: |
        ________________$_____[_,_]          

- Class: text
  Output: ...

- Class: text
  Output: |
          A indexação de listas pode ser feita também utilizando
          
          o operador colchetes, mas nesse caso existem duas 
          
          variações importantes:
          
          Colchetes simples []: seleção de componente + conteúdo
          
          Colchetes duplos [[]]: seleção apenas do conteúdo
          
          Vejamos exemplos...


- Class: cmd_question
  Output: |
          Assim como em vetores, a seleção de componentes de listas
          
          pode ser feita com a seguinte estrutura:
          
          nome_do_objeto[índice]
          
          EXERCÍCIO
          
          Por exemplo, para selecionar a componente nomeada
          
          "numeros" em minha_outra_lista, execute o comando abaixo:
          
          minha_outra_lista["numeros"]
          
  CorrectAnswer: 'minha_outra_lista["numeros"]'
  AnswerTests: omnitest(correctExpr = 'minha_outra_lista["numeros"]')
  Hint: |
        minha_outra_lista["numeros"]        

- Class: text
  Output: ...

- Class: cmd_question
  Output: |
          Observe que no exemplo acima, aparece "$numeros" sobre
          
          o vetor contido nessa componente. Isso indica que  
          
          tanto a componente quanto o seu conteúdo foram selecionados.
          
          Para selecionar apenas o conteúdo (o vetor), precisamos
          
          utilizar colchetes duplos.
          
          
          EXERCÍCIO
          
          Execute o comando abaixo e compare o resultado com o do
          
          exercício anterior.
          
          minha_outra_lista[["numeros"]]
          
  CorrectAnswer: 'minha_outra_lista[["numeros"]]'
  AnswerTests: omnitest(correctExpr = 'minha_outra_lista[["numeros"]]')
  Hint: |
        minha_outra_lista[["numeros"]]        

- Class: text
  Output: ...


- Class: mult_question
  Output: |
          Você provavelmente notou que a indexação com os colchetes
          
          duplos seleciona apenas o conteúdo da componente "numeros"
          
          de minha outra lista, que é um vetor.
          
          Isso tem uma grande importância prática... 
          
          EXERCÍCIO
          
          Suponhamos que você esteja interessado em obter a soma
          
          do vetor na componente "números" de minha_outra_lista. 
          
          Qual dos dois comandos abaixo seria a escolha correta?
          
          Obs.: A função sum permite somar os elementos de um vetor.
          
  AnswerChoices: sum(minha_outra_lista[["numeros"]]);
                 sum(minha_outra_lista["numeros"]);
                 
  CorrectAnswer: 'sum(minha_outra_lista[["numeros"]])'
  AnswerTests: omnitest(correctVal='sum(minha_outra_lista[["numeros"]])')
  Hint: ''  

- Class: text
  Output: |
          O comando sum(minha_outra_lista["numeros"]) retornaria
          
          o seguinte erro:
          
          invalid 'type' (list) of argument
          
          porque essa expressão retorna uma componente da lista
          
          minha_outra_lista e seu conteúdo. Uma componente de uma
          
          lista é também uma lista. A função sum é incapaz de 
          
          operar sobre uma lista e por isso ela retorna uma 
          
          mensagem de erro.

- Class: text
  Output: |
          Já o comando minha_outra_lista[["numeros"]] retorna
          
          apenas o conteúdo da componente "numeros", sem a componente.
          
          O conteúdo dessa componente é um vetor numérico. Por isso
          
          a função sum é capaz de operar sobre o resultado dessa 
          
          expressão.

- Class: cmd_question
  Output: |
          EXERCÍCIO
          
          Avalie a estrutura do objeto resultante da expressão
          
          minha_outra_lista["numeros"] usando a expressão abaixo:
          
          str(minha_outra_lista["numeros"])
          
  CorrectAnswer: 'str(minha_outra_lista["numeros"])'
  AnswerTests: omnitest(correctExpr = 'str(minha_outra_lista["numeros"])')
  Hint: |
        str(minha_outra_lista["numeros"])        

- Class: text
  Output: ...


- Class: mult_question
  Output: |
          EXERCÍCIO
          
          A qual classe de objeto pertence o objeto resultante de
          
          minha_outra_lista["numeros"]?

          
        
  AnswerChoices: lista;
                 vetor numérico;
                 
  CorrectAnswer: 'lista'
  AnswerTests: omnitest(correctVal='lista')
  Hint: ''  

- Class: cmd_question
  Output: |
          EXERCÍCIO
          
          Avalie a estrutura do objeto resultante da expressão
          
          minha_outra_lista[["numeros"]] usando a expressão abaixo:
          
          str(minha_outra_lista[["numeros"]])
          
  CorrectAnswer: 'str(minha_outra_lista[["numeros"]])'
  AnswerTests: omnitest(correctExpr = 'str(minha_outra_lista[["numeros"]])')
  Hint: |
        str(minha_outra_lista[["numeros"]])        

- Class: text
  Output: ...


- Class: mult_question
  Output: |
          EXERCÍCIO
          
          A qual classe de objeto pertence o objeto resultante de
          
          minha_outra_lista[["numeros"]]?

          
        
  AnswerChoices: vetor numérico;
                 lista;
                 
  CorrectAnswer: 'vetor numérico'
  AnswerTests: omnitest(correctVal='vetor numérico')
  Hint: ''  


- Class: text
  Output: |
          Para finalizar essa lição, algumas observações:
          
          1) A indexação com o operador $ é equivalente à com
          
          colchetes duplos;
          
          2) A nomeação das componentes das listas pode ser feita
          
          durante sua criação. Por exemplo, o comando abaixo criaria
          
          uma lista com duas componentes nomeadas:
          
          lista <- list(Primeira = 1:10, Segunda = c("a", "b"));
          
          3) Iremos explorar as listas com uma abordagem mais prática 
          
          quando estivermos trabalhando com análises. Caso você queira
          
          um exemplo, a função princomp permite fazer análise de componentes
          
          principais no R. Execute o comando abaixo para ver a lista 
          
          resultante dessa função (você precisará sair da lição):
          
          str(princomp(iris[, 1:4], cor = TRUE))




















